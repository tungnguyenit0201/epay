// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BioSDK
import AVFoundation
import AVKit
@_exported import BioSDK
import FinalSDK
import Foundation
import GatGuSI
import Swift
import SystemConfiguration
import UIKit
@_hasMissingDesignatedInitializers public class Utils {
  public static func convertBase64(_ consumerKey: Swift.String, _ consumerSecret: Swift.String) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class InvalidDocumentAlert : ObjectiveC.NSObject {
  @objc public var mesage: Swift.String
  @objc public var buttonText: Swift.String
  @objc public var messageColor: UIKit.UIColor?
  @objc public var buttonTextColor: UIKit.UIColor?
  @objc public var buttonColor: UIKit.UIColor?
  @objc public var backgroundColor: UIKit.UIColor?
  @objc deinit
  @objc override dynamic public init()
}
extension Encodable {
  public func toDictionary(_ encoder: Foundation.JSONEncoder = JSONEncoder()) throws -> [Swift.String : Any]
  public func asDictionary() throws -> [Swift.String : Any]
  public var toDdictionary: [Swift.String : Any]? {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class AdvanceOption : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var help: Swift.String
  @objc public var titleButtonRetake: Swift.String
  @objc public var titleButtonNext: Swift.String
  @objc public var isShowTutorial: Swift.Bool
  @objc public var logoNameImage: Swift.String
  @objc public var isShowLogo: Swift.Bool
  @objc public var titleBtnHelp: Swift.String
  @objc public var contentPreviewView: UIKit.UIView?
  @objc public var tutorialView: UIKit.UIView?
  @objc public var titleBtnUnderstand: Swift.String
  @objc public var textColorBtnUnderstand: UIKit.UIColor
  @objc public var textColorBtnRetake: UIKit.UIColor?
  @objc public var textColorBtnNext: UIKit.UIColor?
  @objc public var bgColorBtnUnderstand: UIKit.UIColor?
  @objc public var bgColor: UIKit.UIColor?
  @objc public var bgBtnRetakeColor: UIKit.UIColor?
  @objc public var bgNextColor: UIKit.UIColor?
  @objc public var postionCamera: BioSDK.PostionCamera
  @objc public var progressBarColor: UIKit.UIColor?
  @objc public var imageTopLine: Swift.String
  @objc public var imageSquareBottom: Swift.String
  @objc public var colorStepNext: UIKit.UIColor?
  @objc public var isShowArrowStep: Swift.Bool
  @objc public var isShowWaveGuilde: Swift.Bool
  @objc public var isAutoNext: Swift.Bool
  @objc public var countdownTime: Swift.Int
  @objc public var titleColor: UIKit.UIColor?
  @objc public var iconBack: Swift.String
  @objc public var textContentColor: UIKit.UIColor?
  @objc public var backgroundHelpButton: UIKit.UIColor?
  @objc public var textHelpButtonColor: UIKit.UIColor?
  @objc public var isAnimatedDismiss: Swift.Bool
  @objc public var isShowPreviewTitle: Swift.Bool
  @objc public var isTakeMoreImage: Swift.Bool
  @objc public var isShowVersion: Swift.Bool
  @objc public var titleAttributes: [Foundation.NSAttributedString.Key : Any]?
  @objc public var titleButtonRetakeAttributes: [Foundation.NSAttributedString.Key : Any]?
  @objc public var titleButtonNextAttributes: [Foundation.NSAttributedString.Key : Any]?
  @objc public var titleBtnHelpAttributes: [Foundation.NSAttributedString.Key : Any]?
  @objc public var titleBtnUnderstandAttributes: [Foundation.NSAttributedString.Key : Any]?
  @objc public var textStepFaceAttributes: [Foundation.NSAttributedString.Key : Any]?
  @objc public var faceSteps: [BioSDK.FaceStep]
  @objc public var isVibrate: Swift.Bool
  @objc public var isMirrorFrontCamera: Swift.Bool
  @objc public var isStreamCapture: Swift.Bool
  @objc public var isRecord: Swift.Bool
  @objc public var maxTimeRecord: Swift.Int
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers public class Reachability {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class BasicOption : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var help: Swift.String
  @objc public var titleButtonRetake: Swift.String
  @objc public var titleButtonNext: Swift.String
  @objc public var titleBtnHelp: Swift.String
  @objc public var textContentPreview: Swift.String
  @objc public var tutorialView: UIKit.UIView?
  @objc public var isShowTutorial: Swift.Bool
  @objc public var logoNameImage: Swift.String
  @objc public var isShowLogo: Swift.Bool
  @objc public var titleBtnUnderstand: Swift.String
  @objc public var textColorBtnUnderstand: UIKit.UIColor
  @objc public var textColorBtnRetake: UIKit.UIColor?
  @objc public var textColorBtnNext: UIKit.UIColor?
  @objc public var bgColorBtnUnderstand: UIKit.UIColor?
  @objc public var bgColor: UIKit.UIColor?
  @objc public var bgBtnRetakeColor: UIKit.UIColor?
  @objc public var bgNextColor: UIKit.UIColor?
  @objc public var postionCamera: BioSDK.PostionCamera
  @objc public var isSwapCamera: Swift.Bool
  @objc public var imageTopLine: Swift.String
  @objc public var imageSquareBottom: Swift.String
  @objc public var imageCircleColor: UIKit.UIColor?
  @objc public var isAutoNext: Swift.Bool
  @objc public var countdownTime: Swift.Int
  @objc public var titleColor: UIKit.UIColor?
  @objc public var iconBack: Swift.String
  @objc public var iconSwapCamera: Swift.String
  @objc public var iconTakePhoto: Swift.String
  @objc public var textContentColor: UIKit.UIColor?
  @objc public var backgroundHelpButton: UIKit.UIColor?
  @objc public var textHelpButtonColor: UIKit.UIColor?
  @objc public var textContentPreviewColor: UIKit.UIColor?
  @objc public var isAnimatedDismiss: Swift.Bool
  @objc public var isShowPreviewTitle: Swift.Bool
  @objc public var isShowVersion: Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FaceStep : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public init(_ step: BioSDK.FaceStepType)
  @objc public var type: BioSDK.FaceStepType
  @objc public var viewGuide: UIKit.UIView?
  @objc public var textGuide: Swift.String
  @objc public var jsonArrowGuide: Swift.String
  @objc public var jsonWaveGuide: Swift.String
  @objc public var dataJsonArrowGuide: BioSDK.typeJson?
  @objc public var dataJsonWaveGuide: BioSDK.typeJson?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class TwoSideOption : ObjectiveC.NSObject {
  @objc public var titleFont: Swift.String
  @objc public var titleBack: Swift.String
  @objc public var frontHelpPreview: Swift.String
  @objc public var backHelpPreview: Swift.String
  @objc public var frontHelp: Swift.String
  @objc public var backHelp: Swift.String
  @objc public var title: Swift.String
  @objc public var isShowTutorial: Swift.Bool
  @objc public var logoNameImage: Swift.String
  @objc public var isShowLogo: Swift.Bool
  @objc public var titleButtonRetake: Swift.String
  @objc public var titleButtonNext: Swift.String
  @objc public var btnFinishTitle: Swift.String
  @objc public var titleBtnHelp: Swift.String
  @objc public var tutorialView: UIKit.UIView?
  @objc public var titleBtnUnderstand: Swift.String
  @objc public var textColorBtnUnderstand: UIKit.UIColor
  @objc public var textColorBtnRetake: UIKit.UIColor?
  @objc public var textColorBtnNext: UIKit.UIColor?
  @objc public var bgColorBtnUnderstand: UIKit.UIColor?
  @objc public var bgColorPreview: UIKit.UIColor?
  @objc public var bgBtnRetakeColor: UIKit.UIColor?
  @objc public var bgNextColor: UIKit.UIColor?
  @objc public var isAutoNext: Swift.Bool
  @objc public var countdownTime: Swift.Int
  @objc public var titleColor: UIKit.UIColor?
  @objc public var iconBack: Swift.String
  @objc public var backgroundHelpButton: UIKit.UIColor?
  @objc public var textHelpButtonColor: UIKit.UIColor?
  @objc public var iconTakePhoto: Swift.String
  @objc public var textContentColor: UIKit.UIColor?
  @objc public var textContentPreviewColor: UIKit.UIColor?
  @objc public var jsonAnimationPreview: Swift.String
  @objc public var imgBackgroundPreview: Swift.String
  @objc public var imageTopViewCamera: Swift.String
  @objc public var imageBottomViewCamera: Swift.String
  @objc public var imageMarkFrameCamera: Swift.String
  @objc public var textGuideImageColor: UIKit.UIColor?
  @objc public var isAnimatedDismiss: Swift.Bool
  @objc public var isShowPreviewTitle: Swift.Bool
  @objc public var isShowVersion: Swift.Bool
  @objc public var isPreviewAnimation: Swift.Bool
  @objc public var frameCornerColor: UIKit.UIColor?
  @objc public var backgroundCameraColor: UIKit.UIColor?
  @objc public var isValidDocument: Swift.Bool
  @objc public var invalidDocumentAlert: BioSDK.InvalidDocumentAlert
  @objc public var textDescriptionInvalid: Swift.String
  @objc public var doneButtonBackgroundDisableColor: UIKit.UIColor?
  @objc public var textDescriptionInvalidColor: UIKit.UIColor?
  @objc deinit
  @objc override dynamic public init()
}
extension Bundle {
  public static let myFramework: Foundation.Bundle?
}
extension UIImage {
  @objc public enum JPEGQuality : Swift.Int {
    case lowest
    case low
    case medium
    case high
    case highest
    public typealias RawValue = CoreGraphics.CGFloat
    public var rawValue: UIKit.UIImage.JPEGQuality.RawValue {
      get
    }
    public init?(rawValue: UIKit.UIImage.JPEGQuality.RawValue)
  }
  public class func gifImageWithData(data: Foundation.NSData) -> UIKit.UIImage?
  public class func gifImageWithURL(gifUrl: Swift.String) -> UIKit.UIImage?
  public class func gifImageWithName(name: Swift.String, bundle: Foundation.Bundle) -> UIKit.UIImage?
  @objc dynamic public func jpeg(_ jpegQuality: UIKit.UIImage.JPEGQuality) -> Foundation.Data?
  public func compressImage(_ jpegQuality: UIKit.UIImage.JPEGQuality = .highest) -> UIKit.UIImage
}
public typealias typeJson = [Swift.String : Any]
@_hasMissingDesignatedInitializers open class ApiClientManagement {
  public static var BASE_URL: Swift.String
  public static var accessToken: Swift.String
  open class func setupCreateAccessToken(consumerKey: Swift.String, consumerSecret: Swift.String, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func classifyDocument(frontImg: UIKit.UIImage, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func setupOcrDocument(frontImg: UIKit.UIImage, backImg: UIKit.UIImage = UIImage(), cropParam: Swift.String? = nil, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func compareFaceLiveness(frontImg: UIKit.UIImage, faceImg: UIKit.UIImage, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func findPersons(nationalID: Swift.String, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func getInformationPerson(idPerson: Swift.Int, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func getInformationDocument(idPerson: Swift.Int, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func createPerson(nationalID: Swift.String, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func createDemoGraphic(idPerson: Swift.Int, nationalID: Swift.String, gender: Swift.String, fullName: Swift.String, birthDay: Swift.String, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func createDocument(idPerson: Swift.Int, nationalID: Swift.String, idType: Swift.Int, informations: Swift.String, frontUUID: Swift.String, backUUID: Swift.String, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func createFace(idPerson: Swift.Int, faceImg: UIKit.UIImage, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func uploadImage(image: UIKit.UIImage, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func deletePerson(idPerson: Swift.Int, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func deleteDemoGraphic(idDemoGraphic: Swift.Int, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func deleteDocument(idDocument: Swift.Int, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func enrollmentsFacesByPersonId(idPerson: Swift.Int, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func identificationFace(faceImg: UIKit.UIImage, limit: Swift.Int = 1, matching: Swift.Double = 0.8, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func verifyFaceWithImage(faceImg: UIKit.UIImage, idPerson: Swift.Int, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func checkLivenessPaper(image: UIKit.UIImage, completion: @escaping (BioSDK.typeJson?, Swift.Error?) -> Swift.Void)
  open class func downloadImageByUUID(uuid: Swift.String, completion: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Camera : ObjectiveC.NSObject {
  @objc public var delegate: BioSDK.CameraDelegate?
  @objc public var documentType: BioSDK.DocumentType
  @objc public var oneSideOption: BioSDK.OneSideOption?
  @objc public var twoSideOption: BioSDK.TwoSideOption?
  @objc public var basicOption: BioSDK.BasicOption?
  @objc public var language: BioSDK.Language
  @objc public var advanceOption: BioSDK.AdvanceOption
  @objc public var ovalOption: BioSDK.OvalOption
  @objc public func show(_ controller: UIKit.UIViewController)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers open class LivenessAPI {
  public static var baseUrl: Swift.String
  public static var token: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class OneSideOption : ObjectiveC.NSObject {
  @objc public var title: Swift.String
  @objc public var help: Swift.String
  @objc public var titleButtonRetake: Swift.String
  @objc public var titleButtonNext: Swift.String
  @objc public var btnFinishTitle: Swift.String
  @objc public var titleBtnHelp: Swift.String
  @objc public var textContentPreview: Swift.String
  @objc public var isShowTutorial: Swift.Bool
  @objc public var logoNameImage: Swift.String
  @objc public var isShowLogo: Swift.Bool
  @objc public var titleBtnUnderstand: Swift.String
  @objc public var textColorBtnUnderstand: UIKit.UIColor
  @objc public var textColorBtnRetake: UIKit.UIColor?
  @objc public var textColorBtnNext: UIKit.UIColor?
  @objc public var bgColorBtnUnderstand: UIKit.UIColor?
  @objc public var bgColorPreview: UIKit.UIColor?
  @objc public var bgBtnRetakeColor: UIKit.UIColor?
  @objc public var bgNextColor: UIKit.UIColor?
  @objc public var tutorialView: UIKit.UIView?
  @objc public var isAutoNext: Swift.Bool
  @objc public var countdownTime: Swift.Int
  @objc public var titleColor: UIKit.UIColor?
  @objc public var iconBack: Swift.String
  @objc public var textGuideImage: Swift.String
  @objc public var backgroundHelpButton: UIKit.UIColor?
  @objc public var textHelpButtonColor: UIKit.UIColor?
  @objc public var iconTakePhoto: Swift.String
  @objc public var textContentColor: UIKit.UIColor?
  @objc public var textContentPreviewColor: UIKit.UIColor?
  @objc public var jsonAnimationPreview: Swift.String
  @objc public var imgBackgroundPreview: Swift.String
  @objc public var imageTopViewCamera: Swift.String
  @objc public var imageBottomViewCamera: Swift.String
  @objc public var imageMarkFrameCamera: Swift.String
  @objc public var textGuideImageColor: UIKit.UIColor?
  @objc public var isAnimatedDismiss: Swift.Bool
  @objc public var isShowPreviewTitle: Swift.Bool
  @objc public var isShowVersion: Swift.Bool
  @objc public var isPreviewAnimation: Swift.Bool
  @objc public var frameCornerColor: UIKit.UIColor?
  @objc public var backgroundCameraColor: UIKit.UIColor?
  @objc public var isValidDocument: Swift.Bool
  @objc public var invalidDocumentAlert: BioSDK.InvalidDocumentAlert
  @objc public var textDescriptionInvalid: Swift.String
  @objc public var doneButtonBackgroundDisableColor: UIKit.UIColor?
  @objc public var textDescriptionInvalidColor: UIKit.UIColor?
  @objc deinit
  @objc override dynamic public init()
}
open class BaseModel<T> {
  final public let statusCode: Swift.Int
  final public let header: [Swift.String : Swift.String]
  final public let body: T?
  public init(statusCode: Swift.Int, header: [Swift.String : Swift.String], body: T?)
  convenience public init(response: Foundation.HTTPURLResponse, body: T?)
  @objc deinit
}
public struct DetectModel : Swift.Codable {
  public var liveness: Swift.Bool
  public var livenessScore: Swift.Double
  public var badPhotoReason: Swift.String
  public var message: Swift.String
  public init(liveness: Swift.Bool, livenessScore: Swift.Double, badPhotoReason: Swift.String, message: Swift.String)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case liveness
    case livenessScore
    case badPhotoReason
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public protocol CameraDelegate {
  @objc func onResult(_ data: BioSDK.DataModel)
  @objc optional func onStreamCapture(_ image: UIKit.UIImage, _ type: BioSDK.FaceStepType)
  @objc func onClose()
  @objc optional func onError(_ message: Swift.String)
}
@objc public enum DocumentType : Swift.Int {
  case oneside = 0
  case twoside = 1
  case basic = 3
  case advanced = 4
  case oval = 5
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FaceStepType : Swift.Int {
  case left = 0
  case right = 1
  case up = 2
  case down = 3
  case straight = 4
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LivenessMode : Swift.Int {
  case online
  case offline
  public typealias RawValue = Swift.String
  public var rawValue: BioSDK.LivenessMode.RawValue {
    get
  }
  public init?(rawValue: BioSDK.LivenessMode.RawValue)
}
@objc public enum TutorialType : Swift.Int {
  case id
  case idcard
  case passport
  case military
  case basic
  case advanced
  public typealias RawValue = Swift.String
  public var rawValue: BioSDK.TutorialType.RawValue {
    get
  }
  public init?(rawValue: BioSDK.TutorialType.RawValue)
}
@objc public enum Language : Swift.Int {
  case vn
  case en
  public typealias RawValue = Swift.String
  public var rawValue: BioSDK.Language.RawValue {
    get
  }
  public init?(rawValue: BioSDK.Language.RawValue)
}
@objc public enum PostionCamera : Swift.Int {
  case back
  case front
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class DataModel : ObjectiveC.NSObject {
  @objc public var image: UIKit.UIImage?
  @objc public var frontImage: UIKit.UIImage?
  @objc public var backImage: UIKit.UIImage?
  @objc public var farImage: UIKit.UIImage?
  @objc public var nearImage: UIKit.UIImage?
  @objc public var documentType: BioSDK.DocumentType
  @objc public var listPhoto: [UIKit.UIImage]
  @objc public var topCropParam: Swift.Float
  @objc public var bottomCropParam: Swift.Float
  @objc public var listFaceSteps: [UIKit.UIImage]
  @objc public var scanUrl: Foundation.URL?
  @objc public var logData: Foundation.Data?
  @objc public func getCropParam() -> Swift.String
  @objc public func cropImage(image: UIKit.UIImage) -> UIKit.UIImage
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class OvalOption : ObjectiveC.NSObject {
  @objc public var isShowTutorial: Swift.Bool
  @objc public var isSkipTutorial: Swift.Bool
  @objc public var language: BioSDK.Language
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIImage.JPEGQuality : Swift.Equatable {}
extension UIKit.UIImage.JPEGQuality : Swift.Hashable {}
extension UIKit.UIImage.JPEGQuality : Swift.RawRepresentable {}
extension BioSDK.DetectModel.CodingKeys : Swift.Equatable {}
extension BioSDK.DetectModel.CodingKeys : Swift.Hashable {}
extension BioSDK.DetectModel.CodingKeys : Swift.RawRepresentable {}
extension BioSDK.DocumentType : Swift.Equatable {}
extension BioSDK.DocumentType : Swift.Hashable {}
extension BioSDK.DocumentType : Swift.RawRepresentable {}
extension BioSDK.FaceStepType : Swift.Equatable {}
extension BioSDK.FaceStepType : Swift.Hashable {}
extension BioSDK.FaceStepType : Swift.RawRepresentable {}
extension BioSDK.LivenessMode : Swift.Equatable {}
extension BioSDK.LivenessMode : Swift.Hashable {}
extension BioSDK.LivenessMode : Swift.RawRepresentable {}
extension BioSDK.TutorialType : Swift.Equatable {}
extension BioSDK.TutorialType : Swift.Hashable {}
extension BioSDK.TutorialType : Swift.RawRepresentable {}
extension BioSDK.Language : Swift.Equatable {}
extension BioSDK.Language : Swift.Hashable {}
extension BioSDK.Language : Swift.RawRepresentable {}
extension BioSDK.PostionCamera : Swift.Equatable {}
extension BioSDK.PostionCamera : Swift.Hashable {}
extension BioSDK.PostionCamera : Swift.RawRepresentable {}
